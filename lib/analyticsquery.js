// Generated by CoffeeScript 1.4.0
(function() {
  var AnalyticsQuery, AtAnalyticsQuery, BetweenAnalyticsQuery, GuidedAnalyticsQuery, Time, TimeInStateAnalyticsQuery, TransitionsAnalyticsQuery, lumenize, root, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== "undefined" && exports !== null) {
    lumenize = require('../lib/Lumenize');
  } else {
    lumenize = require('/lumenize');
  }

  utils = lumenize.utils, Time = lumenize.Time;

  if ((utils != null ? utils.type : void 0) == null) {
    utils = {};
    utils.type = (function() {
      var classToType, name, _i, _len, _ref;
      classToType = {};
      _ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      return function(obj) {
        var strType;
        strType = Object.prototype.toString.call(obj);
        return classToType[strType] || "object";
      };
    })();
  }

  root = this;

  AnalyticsQuery = (function() {
    /*
      This is the base class for all analytics query classes. For the most part, you are better off using
      one of the sub-classes but if you want more direct access, you can use this class as follows.
      
      ## Usage ##
      
      First, you need to "require" the desired analytics query class(es). In these examples, we're going to require a mock
      for the XMLHttpResponse Object but you will simply pass in the browser's XMHttpRequest Object (or 
      the equivalent from node-XMLHttpRequest if running on node.js)
      
          {XHRMock} = require('../../mock/XHRMock')
          rally_analytics = require('../')      
      
      Then, you need to set the config Object.
      
          config =
            'X-RallyIntegrationName': 'My Chart'
            'X-RallyIntegrationVendor': 'My Company'
            'X-RallyIntegrationVersion': '0.1.0'
            username: null  # if running in browser, will prompt
            password: null  # if running in Node.js will look for RALLY_USER/RALLY_PASSWORD environment variables
            workspaceOID: 12345
            additionalHeaders: [ 
              someHeader: 'Some Value'
            ]
      Which you can then use when instantiating a query.
      
          query = new rally_analytics.AnalyticsQuery(config, 'hello')
          query.XHRClass = XHRMock  # Not required to hit actual Rally Analytics API
    
      Then you must set the query. `find` is required but you can also specify sort, fields, etc. Notice how you can chain these calls.
    
          query.find({Project: 1234, Tag: 'Expedited', _At: '2012-01-01'}).fields(['ScheduleState'])
        
      Of course you need to have a callback.
      
          callback = () ->
            console.log(this.allResults.length)  # will spit back 5 from our XHRMock
          # 5
    
      Finally, call getPage()
    
          query.getAll(callback)
          
      ## Properties you can inspect or set ##
      
      * **username** default null
      * **password** default null
      * **protocol** default "https"
      * **server** default "rally1.rallydev.com"
      * **service** default "analytics"
      * **version** defaults to latest current version
      * **endpoint** defaults to "artifact/snapshot/query.js"
      * **XHRClass** defaults to the local context XMLHttpResquest. Set to mock for testing.
      
      ## Properties you should only inspect ##
      
      Note, the signature of the callback is callback(snapshots, startOn, endBefore, this). On the last page, endBefore will
      be the ETLDate. For earlier pages, it will be the _ValidFrom of the last row in lastPageResults, which is why the
      sort order must be {_ValidFrom: 1}. startOn will be the @upToDate value, so be sure to set it before calling getPage() for the
      first time. It will update it after that first call to getPage().
    
      The last parameter allows you to inspect the contents of this object. It has these potentially interesting properties.
    
      * **upToDate** the endBefore of the prior call or as set when calling the constructor
      * **ETLDate** the ETLDate of the response in the first page
      * **lastResponseText** the string containing the most recent response/page
      * **lastResponse** the parsed JSON Object of the most recent response/page
      * **lastPageResults** the Results from the most recent page
      * **allResults** the Results from all pages concatenated together
      * **lastPageMeta** the meta data included at the top of the most recent page
      * **allMeta** the meta data from all pages concatentated together including errors and warnings
    */

    function AnalyticsQuery(config, upToDate) {
      var XMLHttpRequest, addRequiredHeader, key, os, platform, value, _ref, _ref1, _ref2, _ref3;
      this.upToDate = upToDate;
      this._gotResponse = __bind(this._gotResponse, this);

      this._debug = false;
      if ((typeof process !== "undefined" && process !== null) && !(typeof window !== "undefined" && window !== null)) {
        XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
      } else if (root.XMLHttpRequest != null) {
        XMLHttpRequest = root.XMLHttpRequest;
      }
      this.XHRClass = XMLHttpRequest;
      this._xhr = null;
      this._find = null;
      this._fields = [];
      this._sort = {
        _ValidFrom: 1
      };
      this._startIndex = 0;
      this._pageSize = 10000000;
      this._callback = null;
      this.headers = {};
      this.headers['X-RallyIntegrationLibrary'] = 'rally_analytics-0.1.0';
      if (typeof navigator !== "undefined" && navigator !== null) {
        platform = navigator.appName + ' ' + navigator.appVersion;
        os = navigator.platform;
      } else if (typeof process !== "undefined" && process !== null) {
        platform = 'Node.js (or some other non-browser) ' + process.version;
        os = process.platform;
      }
      this.headers['X-RallyIntegrationPlatform'] = platform;
      this.headers['X-RallyIntegrationOS'] = os;
      _ref = config.additionalHeaders;
      for (key in _ref) {
        value = _ref[key];
        this.headers[key] = value;
      }
      addRequiredHeader = function(headers, key) {
        if (config[key] != null) {
          return headers[key] = config[key];
        } else {
          throw new Error("Must include config[" + key + "] header when instantiating this rally_analytics.AnalyticsQuery object");
        }
      };
      addRequiredHeader(this.headers, 'X-RallyIntegrationName');
      addRequiredHeader(this.headers, 'X-RallyIntegrationVendor');
      addRequiredHeader(this.headers, 'X-RallyIntegrationVersion');
      if (config.workspaceOID != null) {
        this.workspaceOID = config.workspaceOID;
      } else if (typeof process !== "undefined" && process !== null ? (_ref1 = process.env) != null ? _ref1.RALLY_WORKSPACE : void 0 : void 0) {
        this.workspaceOID = process.env.RALLY_WORKSPACE;
      } else {
        throw new Error('Must provide a config.workspaceOID or set environment variable RALLY_WORKSPACE');
      }
      if (config.username != null) {
        this.username = config.username;
      } else if (typeof process !== "undefined" && process !== null ? (_ref2 = process.env) != null ? _ref2.RALLY_USER : void 0 : void 0) {
        this.username = process.env.RALLY_USER;
      } else {
        this.username = void 0;
      }
      if (config.password != null) {
        this.password = config.password;
      } else if (typeof process !== "undefined" && process !== null ? (_ref3 = process.env) != null ? _ref3.RALLY_PASSWORD : void 0 : void 0) {
        this.password = process.env.RALLY_PASSWORD;
      } else {
        this.password = void 0;
      }
      this.protocol = "https";
      this.server = "rally1.rallydev.com";
      this.service = "analytics";
      this.version = "v2.0";
      this.endpoint = "artifact/snapshot/query.js";
      this.virgin = true;
      this._hasMorePages = true;
      this._firstPage = true;
      this.ETLDate = null;
      this.lastResponseText = '';
      this.lastResponse = {};
      this.lastPageResults = [];
      this.allResults = [];
      this.lastPageMeta = {};
      this.allMeta = [];
    }

    AnalyticsQuery.prototype.resetFind = function() {
      return this._find = null;
    };

    AnalyticsQuery.prototype.find = function(_find) {
      this._find = _find;
      return this;
    };

    AnalyticsQuery.prototype.sort = function() {
      throw new Error('Sort must be {_ValidFrom: 1}.');
    };

    AnalyticsQuery.prototype._setSort = function(_sort) {
      this._sort = _sort;
      return this;
    };

    AnalyticsQuery.prototype.fields = function(additionalFields) {
      var field, key, temp, value, _i, _len, _ref;
      if (utils.type(additionalFields) === 'array') {
        this._fields = this._fields.concat(additionalFields);
      } else if (utils.type(additionalFields) === 'object') {
        if (utils.type(this._fields) === 'array') {
          temp = {};
          _ref = this._fields;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            temp[field] = 1;
          }
          this._fields = temp;
        }
        for (key in additionalFields) {
          value = additionalFields[key];
          this._fields[key] = value;
        }
      } else {
        throw new Error("Don't know what to do. additionalFields is type " + (utils.type(additionalFields)) + " and @_fields it type " + (utils.type(this._fields)) + ".");
      }
      return this;
    };

    AnalyticsQuery.prototype.hydrate = function(_hydrate) {
      this._hydrate = _hydrate;
      return this;
    };

    AnalyticsQuery.prototype.start = function(_startIndex) {
      this._startIndex = _startIndex;
      return this;
    };

    AnalyticsQuery.prototype.startIndex = function(_startIndex) {
      this._startIndex = _startIndex;
      return this;
    };

    AnalyticsQuery.prototype.pagesize = function(_pageSize) {
      this._pageSize = _pageSize;
      return this;
    };

    AnalyticsQuery.prototype.pageSize = function(_pageSize) {
      this._pageSize = _pageSize;
      return this;
    };

    AnalyticsQuery.prototype.auth = function(username, password) {
      this.username = username;
      this.password = password;
      return this;
    };

    AnalyticsQuery.prototype.debug = function() {
      this._debug = true;
      return this;
    };

    AnalyticsQuery.prototype.getBaseURL = function() {
      return this.protocol + '://' + [this.server, this.service, this.version, 'service/rally/workspace', this.workspaceOID, this.endpoint].join('/');
    };

    AnalyticsQuery.prototype.getQueryString = function() {
      var findString, queryArray;
      findString = JSON.stringify(this._find);
      if ((this._find != null) && findString.length > 2) {
        queryArray = [];
        queryArray.push('find=' + findString);
        if (this._sort != null) {
          queryArray.push('sort=' + JSON.stringify(this._sort));
        }
        if (this._fields != null) {
          if (this._fields[0] === true) {
            queryArray.push('fields=true');
          } else if (this._fields.length > 0 || utils.type(this._fields) === 'object') {
            if (!(__indexOf.call(this._fields, '_ValidFrom') >= 0 || this._fields.hasOwnProperty('_ValidFrom'))) {
              if (utils.type(this._fields) === 'object') {
                this._fields._ValidFrom = 1;
              } else if (utils.type(this._fields) === 'array') {
                this._fields.push('_ValidFrom');
              } else {
                throw new Error("@_fields is unexpected type " + (utils.type(this._fields)));
              }
            }
            queryArray.push('fields=' + JSON.stringify(this._fields));
          }
        }
        if (this._hydrate != null) {
          queryArray.push('hydrate=' + JSON.stringify(this._hydrate));
        }
        queryArray.push('start=' + this._startIndex);
        queryArray.push('pagesize=' + this._pageSize);
        return queryArray.join('&');
      } else {
        throw new Error('find clause not set');
      }
    };

    AnalyticsQuery.prototype.getURL = function() {
      var url;
      url = this.getBaseURL() + '?' + this.getQueryString();
      if (this._debug) {
        console.log('\nfind: ', this._find);
        console.log('\nurl:');
        console.log(url);
      }
      return encodeURI(url);
    };

    AnalyticsQuery.prototype.getAll = function(callback) {
      if (this.virgin) {
        this.allCallback = callback;
        this.virgin = false;
        this.upToDate = '2011-12-01T00:00:00.000Z';
      }
      if (this.hasMorePages()) {
        return this.getPage(this.getAll);
      } else {
        return this.allCallback.call(this);
      }
    };

    AnalyticsQuery.prototype.hasMorePages = function() {
      return this._hasMorePages;
    };

    AnalyticsQuery.prototype.getPage = function(_callback) {
      var key, value, _ref;
      this._callback = _callback;
      if (this._find == null) {
        throw new Error('Must set find clause before calling getPage');
      }
      if (this.XHRClass == null) {
        throw new Error('Must set XHRClass');
      }
      if (!this._hasMorePages) {
        throw new Error('All pages retrieved. Inspect AnalyticsQuery.allResults and AnalyticsQuery.allMeta for results.');
      }
      if (this.upToDate == null) {
        throw new Error('Must set property upToDate before calling getPage');
      }
      this._xhr = new this.XHRClass();
      this._xhr.onreadystatechange = this._gotResponse;
      this._xhr.open('GET', this.getURL(), true, this.username, this.password);
      _ref = this.headers;
      for (key in _ref) {
        value = _ref[key];
        this._xhr.setRequestHeader(key, value);
      }
      this._xhr.send();
      return this;
    };

    AnalyticsQuery.prototype._gotResponse = function() {
      var key, newFind, o, results, startOn, value, _i, _len, _ref;
      if (this._debug) {
        console.log('\nreadyState: ', this._xhr.readyState);
      }
      if (this._xhr.readyState === 4) {
        this.lastResponseText = this._xhr.responseText;
        if (this._debug) {
          console.log('Last response text length: ', this.lastResponseText.length);
        }
        this.lastResponse = JSON.parse(this.lastResponseText);
        if (this._debug) {
          console.log('\nresponse headers:\n');
          console.log(this._xhr.getAllResponseHeaders());
          console.log('\nstatus: ', this._xhr.status);
          if (typeof this.lastResponse === 'string') {
            console.log('\nlastResponseText: ', this.lastResponseText);
          } else {
            console.log('\nlastResponseJSON: ', this.lastResponse);
          }
        }
        if (this.lastResponse.Errors.length > 0) {
          console.log('Errors\n' + JSON.stringify(this.lastResponse.Errors));
          return this._callback(this.lastPageResults, startOn, this.upToDate, this);
        } else {
          if (this._firstPage) {
            this._firstPage = false;
            this.allResults = [];
            this.allMeta = [];
            this.ETLDate = this.lastResponse.ETLDate;
            this._pageSize = this.lastResponse.PageSize;
            newFind = {
              '$and': [
                this._find, {
                  '_ValidFrom': {
                    '$lte': this.ETLDate
                  }
                }
              ]
            };
            this._find = newFind;
          } else {
            if (this.lastResponse.PageSize !== this._pageSize) {
              throw new Error('Pagesize changed after first page which is unexpected.');
            }
          }
          startOn = this.upToDate;
          if (this.lastResponse.Results.length + this.lastResponse.StartIndex >= this.lastResponse.TotalResultCount) {
            this._hasMorePages = false;
            this.upToDate = this.ETLDate;
          } else {
            this._hasMorePages = true;
            this.upToDate = this.lastResponse.Results[this.lastResponse.Results.length - 1]._ValidFrom;
          }
          this.lastPageResults = [];
          results = this.lastResponse.Results;
          if (this._debug) {
            console.log('Length of results before @upToDate filtering: ', results.length);
          }
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            o = results[_i];
            if (o._ValidFrom !== this.upToDate) {
              this.lastPageResults.push(o);
            }
          }
          if (this._debug) {
            console.log('Length of results after @upToDate filtering: ', this.lastPageResults.length);
          }
          this._startIndex += this.lastPageResults.length;
          this.allResults = this.allResults.concat(this.lastPageResults);
          this.lastPageMeta = {};
          _ref = this.lastResponse;
          for (key in _ref) {
            value = _ref[key];
            if (key !== 'Results') {
              this.lastPageMeta[key] = value;
            }
          }
          this.allMeta.push(this.lastPageMeta);
          return this._callback(this.lastPageResults, startOn, this.upToDate, this);
        }
      }
    };

    return AnalyticsQuery;

  })();

  GuidedAnalyticsQuery = (function(_super) {

    __extends(GuidedAnalyticsQuery, _super);

    /*
      To help you write performant queries against the non-traditional data model of Rally's Analytics engine, we provide a guided mode 
      for composing queries. Like the raw AnalyticsQuery, you start by creating a GuidedAnalyticsQuery Object. 
      
          query = new rally_analytics.GuidedAnalyticsQuery(config)
          query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
      
      **Scope**
      
      Then you must specify at least one highly selective criteria using the scope method:
      
          query.scope('Project', 1234) # or [1234, 5678]
          query.scope('_ProjectHierarchy', 1234) # or [1234, 5678], also accepts 'ProjectHierarchy'
          query.scope('Iteration', 1234) # or [1234, 5678]
          query.scope('Release', 1234) # or [1234, 5678]
          query.scope('_ItemHierarchy', 1234) # also accepts 'ItemHierarchy'
          query.scope('Tags', 'Top 10') # or ['Top 10', 'Expedite'], also accepts Tag
          
      The 'ProjectHierarchy' scope is not necessarily highly selective. So you should make sure that you
      either have some other criteria or that you don't have too many Projects in scope beneith the specified Project(s).
      
      Alternatively, you can specify your scope in one big object:
      
          query.scope({
            _ProjectHierarchy: 1234,
            Iteration: [1234, 5678], 
          })
          
      **Type**
      
      You can optionally limit your query to one or more work item types. Defaults to all types.
      
          query.type('Defect') # alteratively ['Defect', 'HierarchicalRequirement']
          
      Note, a change is expected to be made such that the Analytics API will require ObjectIDs of the types.
      When that happens, we may update this REST toolkit to hide that from you but you'll need to update
      to the latest version.
      
      **Leaf Nodes Only**  
      
      You can also specify that you only want leaf nodes to be returned by the query.
      
          query.leafOnly()
          
      It will expand to a clause like: 
          
          {
            '$or': [
              {_TypeHierarchy: "HierarchicalRequirement", Children: null},
              {_TypeHierarchy:"PortfolioItem", Children: null, UserStories: null}
            ]
          }
    
      **Additional Criteria**
      
      You can also specify additional critaria. This can be useful for defining "sub-classes" of work items.
          
          query.additionalCriteria({Environment: 'Production'})
          
      **Chaining**
      
      Chaining is supported, so you could say:
      
          query = new rally_analytics.GuidedAnalyticsQuery(config)
          query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
          query.scope('_ProjectHierarchy', 1234)
               .type('HierarchicalRequirement')
               .leafOnly()
               .additionalCriteria({Blocked: true})
               
          query.find()
          console.log(JSON.stringify(query._find, undefined, 2))
          # {
          #   "$and": [
          #     {
          #       "_ProjectHierarchy": 1234
          #     },
          #     {
          #       "_TypeHierarchy": "HierarchicalRequirement"
          #     },
          #     {
          #       "$or": [
          #         {
          #           "_TypeHierarchy": -51038,
          #           "Children": null
          #         },
          #         {
          #           "_TypeHierarchy": -51078,
          #           "Children": null,
          #           "UserStories": null
          #         },
          #         {
          #           "_TypeHierarchy": {
          #             "$nin": [
          #               -51038,
          #               -51078
          #             ]
          #           }
          #         }
          #       ]
          #     },
          #     {
          #       "Blocked": true
          #     }
          #   ]
          # }
    */


    function GuidedAnalyticsQuery(config, upToDate) {
      GuidedAnalyticsQuery.__super__.constructor.call(this, config, upToDate);
      this._scope = {};
      this._type = null;
      this._additionalCriteria = [];
      if (upToDate != null) {
        this._additionalCriteria.push({
          "_ValidTo": {
            $gt: upToDate
          }
        });
      }
    }

    GuidedAnalyticsQuery.prototype.generateFind = function() {
      var c, compoundArray, _i, _len, _ref, _ref1;
      compoundArray = [];
      if (JSON.stringify(this._scope).length > 2) {
        compoundArray.push(this._scope);
      } else {
        throw new Error('Must set scope first.');
      }
      if (this._type != null) {
        compoundArray.push(this._type);
      }
      _ref = this._additionalCriteria;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        compoundArray.push(c);
      }
      if ((0 < (_ref1 = compoundArray.length) && _ref1 < 2)) {
        return compoundArray[0];
      } else {
        return {
          '$and': compoundArray
        };
      }
    };

    GuidedAnalyticsQuery.prototype.find = function() {
      if (arguments.length > 0) {
        throw new Error('Do not call find() directly to set query. Use scope(), type(), and additionalCriteria()');
      }
      GuidedAnalyticsQuery.__super__.find.call(this, this.generateFind());
      return this;
    };

    GuidedAnalyticsQuery.prototype.resetScope = function() {
      return this._scope = {};
    };

    GuidedAnalyticsQuery.prototype.scope = function(key, value) {
      var addToScope, k, v,
        _this = this;
      addToScope = function(k, v) {
        var okKeys;
        if (k === 'ItemHierarchy') {
          k = '_ItemHierarchy';
        }
        if (k === 'Tag') {
          k = 'Tags';
        }
        if (k === 'ProjectHierarchy') {
          k = '_ProjectHierarchy';
        }
        okKeys = ['Project', '_ProjectHierarchy', 'Iteration', 'Release', 'Tags', 'Tag', '_ItemHierarchy'];
        if (__indexOf.call(okKeys, k) < 0) {
          throw new Error("Key for scope() call must be one of " + okKeys);
        }
        if (utils.type(v) === 'array') {
          return _this._scope[k] = {
            '$in': v
          };
        } else {
          return _this._scope[k] = v;
        }
      };
      if (utils.type(key) === 'object') {
        for (k in key) {
          v = key[k];
          addToScope(k, v);
        }
      } else if (arguments.length === 2) {
        addToScope(key, value);
      } else {
        throw new Error('Must provide an Object in first parameter or two parameters (key, value).');
      }
      return this;
    };

    GuidedAnalyticsQuery.prototype.resetType = function() {
      return this._type = null;
    };

    GuidedAnalyticsQuery.prototype.type = function(type) {
      if (utils.type(type) === 'array') {
        this._type = {
          '_TypeHierarchy': {
            '$in': type
          }
        };
      } else {
        this._type = {
          '_TypeHierarchy': type
        };
      }
      return this;
    };

    GuidedAnalyticsQuery.prototype.resetAdditionalCriteria = function() {
      return this._additionalCriteria = [];
    };

    GuidedAnalyticsQuery.prototype.additionalCriteria = function(criteria) {
      this._additionalCriteria.push(criteria);
      return this;
    };

    GuidedAnalyticsQuery.prototype.leafOnly = function() {
      this.additionalCriteria({
        '$or': [
          {
            _TypeHierarchy: -51038,
            Children: null
          }, {
            _TypeHierarchy: -51078,
            Children: null,
            UserStories: null
          }, {
            _TypeHierarchy: {
              $nin: [-51038, -51078]
            }
          }
        ]
      });
      return this;
    };

    GuidedAnalyticsQuery.prototype.getPage = function(callback) {
      this.find();
      return GuidedAnalyticsQuery.__super__.getPage.call(this, callback);
    };

    return GuidedAnalyticsQuery;

  })(AnalyticsQuery);

  AtAnalyticsQuery = (function(_super) {

    __extends(AtAnalyticsQuery, _super);

    /*
      This pattern will tell you what a set of Artfacts looked like at particular moments in time
        
          query = new rally_analytics.AtAnalyticsQuery(config, 'hello', '2012-01-01T12:34:56.789Z')
          query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
          
      It will expand to a query like this:
          
          query.scope('_ProjectHierarchy', 1234)
          query.find()
          console.log(JSON.stringify(query._find, undefined, 2))
          # {
          #   "$and": [
          #     {
          #       "_ProjectHierarchy": 1234
          #     },
          #     {
          #       "__At": "2012-01-01T12:34:56.789Z"
          #     }
          #   ]
          # }
    */


    function AtAnalyticsQuery(config, upToDate, zuluDateString) {
      var key, o;
      AtAnalyticsQuery.__super__.constructor.call(this, config, upToDate);
      if (zuluDateString == null) {
        throw new Error('Must provide a zuluDateString when instantiating an AtAnalyticsQuery.');
      }
      o = {};
      key = String.fromCharCode(95) + "_At";
      o[key] = zuluDateString;
      this._additionalCriteria.push(o);
    }

    return AtAnalyticsQuery;

  })(GuidedAnalyticsQuery);

  BetweenAnalyticsQuery = (function(_super) {

    __extends(BetweenAnalyticsQuery, _super);

    /*
      This pattern will return all of the snapshots active in a particular timebox. The results are in the form expected by the 
      Lumenize function `snapshotArray_To_AtArray`, which will tell you what each work item looked like at a provided list of
      datetimes. This is the current recommended approach for most time-series charts. The burncalculator and cfdcalculator
      use this approach. Note: the 'AtArray' approach will supercede this for time-series charts at some point in the future.
        
          query = new rally_analytics.BetweenAnalyticsQuery(config, '2012-01-01T12:34:56.789Z', '2012-01-10T12:34:56.789Z')
          query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
    
      It will expand to a query like this:
      
          query.scope('_ProjectHierarchy', 1234)
          query.find()
          console.log(JSON.stringify(query._find, undefined, 2))
          # {
          #   "$and": [
          #     {
          #       "_ProjectHierarchy": 1234
          #     },
          #     {
          #       "_ValidFrom": {
          #         "$lt": "2012-01-10T12:34:56.789Z"
          #       }, 
          #       "_ValidTo": {
          #         "$gt": "2012-01-01T12:34:56.789Z"
          #       }
          #     }
          #   ]
          # }
    */


    function BetweenAnalyticsQuery(config, startOn, endBefore) {
      var criteria;
      BetweenAnalyticsQuery.__super__.constructor.call(this, config, startOn);
      if (!((startOn != null) && (endBefore != null))) {
        throw new Error('Must provide two zulu data strings when instantiating a BetweenAnalyticsQuery.');
      }
      criteria = {
        "_ValidFrom": {
          $lt: endBefore
        },
        "_ValidTo": {
          $gt: startOn
        }
      };
      this._additionalCriteria.push(criteria);
    }

    return BetweenAnalyticsQuery;

  })(GuidedAnalyticsQuery);

  TimeInStateAnalyticsQuery = (function(_super) {

    __extends(TimeInStateAnalyticsQuery, _super);

    /*
      This pattern will only return snapshots where the specified clause is true.
      This is useful for Cycle Time calculations as well as calculating Flow Efficiency or Blocked Time.
      
          query = new rally_analytics.TimeInStateAnalyticsQuery(config, 'hello', {KanbanState: {$gte: 'In Dev', $lt: 'Accepted'}})
          query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
    */


    function TimeInStateAnalyticsQuery(config, upToDate, predicate) {
      TimeInStateAnalyticsQuery.__super__.constructor.call(this, config, upToDate);
      if (predicate == null) {
        throw new Error('Must provide a predicate when instantiating a TimeInStateAnalyticsQuery.');
      }
      this._additionalCriteria.push(predicate);
      this.fields(['ObjectID', '_ValidFrom', '_ValidTo']);
    }

    return TimeInStateAnalyticsQuery;

  })(GuidedAnalyticsQuery);

  TransitionsAnalyticsQuery = (function(_super) {

    __extends(TransitionsAnalyticsQuery, _super);

    /*
      This pattern will return the snapshots where the _PreviousValue matches the first query clause parameter and the "current"
      value matches the second query clause parameter. In other words, it finds particular transitions. It is useful for 
      Throughput/Velocity calculations. 
      
      !TODO: Indent below to make sure it works and add example
      query = new TransitionsAnalyticsQuery(config,
        {ScheduleState: {$lt: 'Accepted'}}, 
        {ScheduleState: {$gte: 'Accepted'}}
      )
      query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
    
      
      The first predicate is actually converted such that any non-operator key is prepended with "_PreviousValues.". In the example
      above, "{ScheduleState: {$lt: 'Accepted'}}" becomes "{'_PreviousValues.ScheduleState': {$lt: 'Accepted'}}". So this will return
      the snapshots that made this particular transition from before state to after state.
      
      Note, you should also run the query swapping the two predicates and subtract the two calculations before reporting a Thoughput or 
      Velocity result. Without doing so, any story that crosses the boudary multiple times would get double, triple, etc. counted.
      
      In a future version, you may be able to specify aggregation functions ($count, $sum, $push, etc.) on a particular field when 
      making this query, because when you use this pattern, you are usually interested in the sum or count and not the actual snapshots.
      In the mean time, if you are only interested in the count, simply specify pagesize of 1 and inspect the TotalResultCount in the top
      section of the response.
      
      There is a good reason that Throughput and Velocity are defined with two predicates rather than just specifying the line to the left
      of "Accepted". Let's say, work is not really "Accepted" until the Ready flag is checked. You could write that query like so:
    
      !TODO: Indent below to make sure it works and add example
      query = new rally_analytics.TransitionsAnalyticsQuery(config,
        {$or: [{KanbanState: {$lt: 'Accepted'}}, {KanbanState: 'Accepted', Ready: false}]}, 
        {$or: [{KanbanState: 'Accepted', Ready: true}, {KanbanState: {$gt: 'Accepted'}}]}
      )
      query.XHRClass = XHRMock  # Not required to hit real Rally Analytics API
          
      It will expand to a query like this:
    
      !TODO: Indent below to make sure it works and add example
      query.scope('_ProjectHierarchy', 1234)
      query.find()
      console.log(JSON.stringify(query._find, undefined, 2))
      #
    */


    function TransitionsAnalyticsQuery(config, upToDate, predicate) {
      TransitionsAnalyticsQuery.__super__.constructor.call(this, config, upToDate);
      if (predicate == null) {
        throw new Error('Must provide a predicate when instantiating a TimeInStateAnalyticsQuery.');
      }
      this._additionalCriteria.push(predicate);
      this._additionalCriteria.push({
        "_ValidFrom": {
          $gte: upToDate
        }
      });
      this.fields(['ObjectID', '_ValidFrom', '_ValidTo']);
    }

    return TransitionsAnalyticsQuery;

  })(GuidedAnalyticsQuery);

  root.AnalyticsQuery = AnalyticsQuery;

  root.GuidedAnalyticsQuery = GuidedAnalyticsQuery;

  root.AtAnalyticsQuery = AtAnalyticsQuery;

  root.BetweenAnalyticsQuery = BetweenAnalyticsQuery;

  root.TimeInStateAnalyticsQuery = TimeInStateAnalyticsQuery;

  root.TransitionsAnalyticsQuery = TransitionsAnalyticsQuery;

}).call(this);
