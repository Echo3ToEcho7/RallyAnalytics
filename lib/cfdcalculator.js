// Generated by CoffeeScript 1.3.3
(function() {
  var Time, cfdCalculator, lumenize, root, timeSeriesGroupByCalculator, utils;

  root = this;

  lumenize = require('/lumenize');

  timeSeriesGroupByCalculator = lumenize.timeSeriesGroupByCalculator, Time = lumenize.Time;

  utils = lumenize.utils;

  cfdCalculator = function(results, config) {
    /*
      Takes the "results" from a query to Rally's Analytics API (or similar MVCC-based implementation)
      and returns the data points for a cumulative flow diagram (CFD).
    */

    var categories, ct, drillDownObjectIDs, firstTrackingCT, firstTrackingDate, groupByAtArray, i, lastTrackingCT, lastTrackingDate, listOfAtCTs, lowestValueInLastState, maxDaysBackCT, row, series, timeSeriesGroupByCalculatorConfig, timelineConfig, uniqueValues, _i, _len, _ref;
    lastTrackingDate = results[results.length - 1]._ValidFrom;
    lastTrackingCT = new Time(lastTrackingDate, 'day', config.timezone).add(1);
    firstTrackingDate = '';
    for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
      row = results[i];
      if (row[config.groupByField] === config.startTrackingGroupByFieldValue) {
        firstTrackingDate = row._ValidFrom;
        break;
      }
    }
    if (firstTrackingDate === '') {
      throw new Error("Couldn't find any data whose " + config.groupByField + " transitioned into groupByFieldValue " + config.startTrackingGroupByFieldValue);
    }
    firstTrackingCT = new Time(firstTrackingDate, 'day', config.timezone);
    if (config.maxDaysBack != null) {
      maxDaysBackCT = lastTrackingCT.add(-1 * config.maxDaysBack, 'day');
      if (firstTrackingCT.lessThan(maxDaysBackCT)) {
        firstTrackingCT = maxDaysBackCT;
      }
    }
    timelineConfig = {
      workDays: config.workDays,
      holidays: config.holidays,
      startOn: firstTrackingCT,
      endBefore: lastTrackingCT
    };
    console.log('timelineConfig:\n' + JSON.stringify(timelineConfig, void 0, 4));
    timeSeriesGroupByCalculatorConfig = {
      timelineConfig: timelineConfig,
      timezone: config.timezone,
      groupByField: config.groupByField,
      groupByFieldValues: config.groupByFieldValues,
      useAllGroupByFieldValues: config.useAllGroupByFieldValues,
      aggregationField: config.aggregationField,
      aggregationFunction: config.aggregationFunction,
      snapshotValidFromField: '_ValidFrom',
      snapshotValidToField: '_ValidTo',
      snapshotUniqueID: 'ObjectID'
    };
    console.log('before call to timeSeriesGroupByCalculator');
    _ref = timeSeriesGroupByCalculator(results, timeSeriesGroupByCalculatorConfig), listOfAtCTs = _ref.listOfAtCTs, groupByAtArray = _ref.groupByAtArray, uniqueValues = _ref.uniqueValues;
    console.log('after call to timeSeriesGroupByCalculator');
    if (config.useAllGroupByFieldValues) {
      series = lumenize.groupByAtArray_To_HighChartsSeries(groupByAtArray, config.groupByField, 'GroupBy');
      drillDownObjectIDs = lumenize.groupByAtArray_To_HighChartsSeries(groupByAtArray, config.groupByField, 'DrillDown', uniqueValues, true);
    } else {
      series = lumenize.groupByAtArray_To_HighChartsSeries(groupByAtArray, config.groupByField, 'GroupBy', config.groupByFieldValues);
      drillDownObjectIDs = lumenize.groupByAtArray_To_HighChartsSeries(groupByAtArray, config.groupByField, 'DrillDown', config.groupByFieldValues, true);
    }
    categories = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = listOfAtCTs.length; _j < _len1; _j++) {
        ct = listOfAtCTs[_j];
        _results.push("" + (ct.toString()));
      }
      return _results;
    })();
    lowestValueInLastState = null;
    if (!config.useAllGroupByFieldValues) {
      lowestValueInLastState = lumenize.functions.min(series[series.length - 1].data);
    }
    return {
      series: series,
      categories: categories,
      drillDownObjectIDs: drillDownObjectIDs,
      lowestValueInLastState: lowestValueInLastState
    };
  };

  root.cfdCalculator = cfdCalculator;

}).call(this);
